openapi: '3.0.2'
info:
  title: Order Management API
  version: '1.0'
  description: API for managing orders

servers:
  - url: https://ag-customer-api.azurewebsites.net/orders/  # Replace with actual server URL

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the order item
        parentCustomerID:
          type: integer
          description: Identifier for the parent customer
        parentCustomer:
          type: string
          description: Name of the parent customer
        localCustomer:
          type: string
          description: Name of the local customer
        localCustomerID:
          type: string
          description: Identifier for the local customer
        salesOrderID:
          type: string
          description: Sales order identifier
        unitQuantity:
          type: integer
          description: Quantity of units in the order item
        itemValue:
          type: number
          format: decimal
          description: Value of the item
        storageLocation:
          type: string
          description: Storage location of the item
        orderItemName:
          type: string
          description: Name of the order item
        orderItemDescription:
          type: string
          description: Description of the order item
        shippingDestinationCountry:
          type: string
          description: Country of the shipping destination
        shippingDestinationCity:
          type: string
          description: City of the shipping destination
        profitCentre:
          type: string
          description: Profit centre associated with the order item
      required:
        - id
        - parentCustomerID
        - unitQuantity
        - itemValue

paths:
  /:
    get:
      summary: Get all orders
      operationId: GetAllOrders
      tags:
        - Order
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      summary: Create a new order
      operationId: CreateOrder
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /{id}:
    get:
      summary: Get a specific order by ID
      operationId: GetOrderById
      tags:
        - Order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    put:
      summary: Update an existing order
      operationId: UpdateOrder
      tags:
        - Order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '204':
          description: Order updated successfully
        '404':
          description: Order not found

    delete:
      summary: Delete an order
      operationId: DeleteOrder
      tags:
        - Order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

  /customer/{localCustomerName}:
    get:
      summary: Get orders by local customer name
      operationId: GetOrdersByLocalCustomerName
      tags:
        - Order
      parameters:
        - name: localCustomerName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /parentCustomer/{parentCustomerName}:
    get:
      summary: Get orders by parent customer name
      operationId: GetOrdersByParentCustomerName
      tags:
        - Order
      parameters:
        - name: parentCustomerName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /salesOrder/{salesOrderId}:
    get:
      summary: Get orders by sales order ID
      operationId: GetOrdersBySalesOrderId
      tags:
        - Order
      parameters:
        - name: salesOrderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'